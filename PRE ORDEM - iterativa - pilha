#include <stdio.h>
#include <stdlib.h>


typedef struct no {
    int dado;
    struct no *esq, *dir;
} no;

void pre_ordem (no *raiz){

    no * pilha[101];
    no * aux = raiz;
    int topo = 0 ;

    while(topo != 0 || aux != NULL){

        if(aux != NULL){
            pilha[topo] = aux; // empilha
            printf("%d ", aux->dado);
            topo++; // atualiza
            aux = aux->esq; // anda pra frente
        }

        else{
            topo--; // atualiza topo
            aux = pilha[topo]; // agrega var
            if(aux != NULL){ // confere
                aux = aux->dir;// anda pra direita COM POP
            }

        }
    }
}

int main() {
    // Exemplo de construção de uma árvore maior:
    no *raiz = malloc(sizeof(no));
    raiz->dado = 2;
    raiz->esq = malloc(sizeof(no));
    raiz->esq->dado = 5;
    raiz->esq->esq = malloc(sizeof(no));
    raiz->esq->esq->dado = 3;
    raiz->esq->esq->esq = NULL;
    raiz->esq->esq->dir = NULL;
    raiz->esq->dir = malloc(sizeof(no));
    raiz->esq->dir->dado = 8;
    raiz->esq->dir->esq = malloc(sizeof(no));
    raiz->esq->dir->esq->dado = 4;
    raiz->esq->dir->dir = NULL;
    raiz->dir = malloc(sizeof(no));
    raiz->dir->dado = 7;
    raiz->dir->esq = malloc(sizeof(no));
    raiz->dir->esq->dado = 1;
    raiz->dir->esq->esq = NULL;
    raiz->dir->esq->dir = malloc(sizeof(no));
    raiz->dir->esq->dir->dado = 9;
    raiz->dir->dir = malloc(sizeof(no));
    raiz->dir->dir->dado = 6;
    raiz->dir->dir->esq = NULL;
    raiz->dir->dir->dir = NULL;

    printf("Percurso em ordem:\n");
    pre_ordem(raiz);

    return 0;
}
